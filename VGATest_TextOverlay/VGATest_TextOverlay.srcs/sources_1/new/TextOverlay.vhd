----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05/24/2019 07:27:02 PM
-- Design Name: 
-- Module Name: TextOverlay - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity TextOverlay is
  Port (clk : in STD_LOGIC;
        overlayDrawEnable : in STD_LOGIC;
        drawXPixelCoord : in STD_LOGIC_VECTOR(9 downto 0); -- 0 to 640
        drawYPixelCoord : in STD_LOGIC_VECTOR(9 downto 0); -- 0 to 480
        writeEnable : in STD_LOGIC;
        writeXChar : in STD_LOGIC_VECTOR(6 downto 0); -- 0 to 79
        writeYChar : in STD_LOGIC_VECTOR(5 downto 0); -- 0 to 59
        writeCharASCII : in STD_LOGIC_VECTOR(7 downto 0); -- 0 to 255
        writeCharForegroundColor : in STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a with 1 bit each
        writeCharBackgroundColor : in STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a with 1 bit each
        rgbColorOut : out STD_LOGIC_VECTOR(2 downto 0);
        alphaBlendOut : out STD_LOGIC);
end TextOverlay;

architecture Behavioral of TextOverlay is

type SCREEN_COORD is record
    xPos : STD_LOGIC_VECTOR(9 downto 0);
    yPos : STD_LOGIC_VECTOR(9 downto 0);
end record SCREEN_COORD;

type CHAR_POS is record
    xLoc : STD_LOGIC_VECTOR(6 downto 0); -- 0 to 79
    yLoc : STD_LOGIC_VECTOR(5 downto 0); -- 0 to 59
end record CHAR_POS;

type CHAR_DATA is record
    charASCII : STD_LOGIC_VECTOR(7 downto 0); -- 0 to 255
    fgColor : STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a one bit each
    bgColor : STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a one bit each
end record CHAR_DATA;  

-- We're only really using 16 bits of each of these, but in order to be able to automatically infer BRAM,
-- the element size has to be 32-bits wide
type ram_bits_t is array( ( (128 * 60) - 1) downto 0) of STD_LOGIC_VECTOR(15 downto 0);

-- Bit data imported from a 128x128 texture
type rom_bits_t is array(127 downto 0) of std_logic_vector(127 downto 0);
signal rom_bits : rom_bits_t := (
	0   => "00001000001111000000110000011100111100001110001100011100111111110000000000001000000010000000100000110110001111000011110000000000",
	1   => "00101010001001000001010000100010110000001101110100100010111111110000000000011100000111000001110001111111011111100100001000000000",
	2   => "00011100001111000010010000100010101000001011111001000001111111110000000000111110001010100011111001111111110110111010010100000000",
	3   => "01110111001001000010010000100010100111101011111001000001111001110000110001111111011111110111111101111111111111111000000100000000",
	4   => "00011100001001000001010000011100000100011011111001000001111001110000110001111111001010100011111000111110111111111010010100000000",
	5   => "00101010001001110000010000001000000100011101110100100010111111110000000000001000000010000001110000011100110110111001100100000000",
	6   => "00001000001110110000011100111110000100011110001100011100111111110000000000011100000111000000100000001000011001100100001000000000",
	7   => "00000000000110000000001100001000000011101111111100000000111111110000000000000000000000000000000000000000001111000011110000000000",
	8   => "00000000000000011000000010000001000010000000100000000000000000000000000000001000000010000000100000001000000000000000100000001000",
	9   => "00001000000000100100000001000010000010000000100000000000000000000000000000001000000010000000100000001000000000000000100000001000",
	10  => "00001000000001000010000000100100000010000000100000000000000000000000000000001000000010000000100000001000000000000000100000001000",
	11  => "11111111000010000001000000011000000011111111100000001111111110001111111100001000111111111111100000001111111111111111111100111110",
	12  => "00001000000100000000100000011000000000000000000000001000000010000000000000001000000010000000100000001000000010000000000000001000",
	13  => "00001000001000000000010000100100000000000000000000001000000010000000000000001000000010000000100000001000000010000000000000001000",
	14  => "00000000010000000000001001000010000000000000000000001000000010000000000000001000000010000000100000001000000010000000000000001000",
	15  => "00000000100000000000000110000001000000000000000000001000000010000000000000001000000010000000100000001000000010000000000000001000",
	16  => "00000000000000000000000000000000000000000001000100000010000010000000100000000010000000110000010000001010000010100000010000000000",
	17  => "00000000000000000000000000000000000001000000101000000100000001000000010000000101000100110001111000001010000010100000010000000000",
	18  => "00010000000000000000000000000000000001000000010000001000000000100000001000000010000010000000010100011111000010100000010000000000",
	19  => "00001000000000000001111000000000000111110001111100001000000000100000000000010101000001000000111000001010000000000000010000000000",
	20  => "00000100000000000000000000000000000001000000010000001000000000100000000000001001000000100001010000011111000000000000000000000000",
	21  => "00000010000001100000000000000100000001000000101000000100000001000000000000011001000110010000111100001010000000000000000000000000",
	22  => "00000001000001100000000000000100000000000001000100000010000010000000000000000110000110000000010000001010000000000000010000000000",
	23  => "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	24  => "00001110000000110000000000011000000000000000000000001110000011100001111100001100000111110000100000001110000011100000010000001110",
	25  => "00010001000001100000000000001100000000000000000000010001000100010001000100000010000000010000110000010001000100010000011000010001",
	26  => "00010000000011000001111100000110000001000000010000010001000100010000100000000001000001110000101000010000000100000000010100011001",
	27  => "00001000000110000000000000000011000000000000000000011110000011100000010000001111000010000000100100001100000010000000010000010101",
	28  => "00000100000011000001111100000110000000000000000000010000000100010000010000010001000100000001111100010000000001100000010000010011",
	29  => "00000000000001100000000000001100000001000000010000001000000100010000010000010001000010000000100000010001000000010000010000010001",
	30  => "00000100000000110000000000011000000001000000000000000110000011100000010000001110000001110000100000001110000111110001111100001110",
	31  => "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	32  => "00001110000100010001000100000001000100010001110000001110000100010000111000011111000111110000011100001100000011110000010000001110",
	33  => "00010001000100110001101100000001000010010000100000000100000100010001000100000001000000010000101000010010000100100000101000010001",
	34  => "00010001000100110001010100000001000001010000100000000100000100010000000100000001000000010001001000000001000100100001000100010000",
	35  => "00010001000101010001010100000001000000110000100000000100000111110001110100001111000011110001001000000001000011100001000100010110",
	36  => "00010001000110010001000100000001000001010000100100000100000100010001000100000001000000010001001000000001000100100001111100010101",
	37  => "00010001000110010001000100000001000010010000100100000100000100010001000100000001000000010000101000010010000100100001000100010101",
	38  => "00001110000100010001000100011111000100010000011000001110000100010000111000000001000111110000011100001100000011110001000100001110",
	39  => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	40  => "00000000000001000000111000000000000011100001111100010001000100010001000100010001000100010001111100001110000011110000111000001111",
	41  => "00000000000010100000100000000000000000100001000000010001000100010001000100010001000100010000010000010001000100010001000100010001",
	42  => "00000000000100010000100000000001000000100000100000010001000010100001000100010001000100010000010000000001000100010001000100010001",
	43  => "00000000000000000000100000000010000000100000010000001110000001000001010100010001000100010000010000001110000011110001000100001111",
	44  => "00000000000000000000100000000100000000100000001000000100000010100001010100001010000100010000010000010000000001010001010100000001",
	45  => "00000000000000000000100000001000000000100000000100000100000100010001101100001010000100010000010000010001000010010000100100000001",
	46  => "00011111000000000000111000010000000011100001111100000100000100010001000100000100000011100000010000001110000100010001011000000001",
	47  => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	48  => "00000000000000000000000000000110000000100000100000000100000000010000000000001000000000000001000000000000000000010000000000000010",
	49  => "00000000000000000000000000000100000000100000000000000000000000010000000000010100000000000001000000000000000000010000000000000100",
	50  => "00001110000011010000101100000100000100100000110000000110000011110001011000000100000011100001011000001110000011010000111000001000",
	51  => "00010001000100110001010100000100000010100000100000000100000100010001100100011111000100010001100100010001000100110001000000000000",
	52  => "00010001000100010001010100000100000001100000100000000100000100010001100100000100000111110001000100000001000100010001111000000000",
	53  => "00010001000100010001010100000100000010100000100000000100000100010001011000000100000000010001100100010001000100110001000100000000",
	54  => "00001110000100010001010100001110000100100000100100001110000100010001000000000100000011100001011000001110000011010001111000000000",
	55  => "00000000000000000000000000000000000000000000011000000000000000000000111000000000000000000000000000000000000000000000000000000000",
	56  => "00000000000000100000001100000100000110000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000",
	57  => "00000000000101010000010000000100000001000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000",
	58  => "00000100000010000000010000000100000001000001111100010001000100010001000100010001000010010000111100011110000011010001011000001101",
	59  => "00001010000000000000100000000000000000100000100000010001000010100001010100010001000010010000001000000001000100110001100100010011",
	60  => "00011111000000000000010000000100000001000000010000011001000001000001010100010001000010010000001000001111000000010001100100010011",
	61  => "00000000000000000000010000000100000001000000001000010110000010100001010100001010000010010001001000010000000000010001011000001101",
	62  => "00000000000000000000001100000100000110000001111100010000000100010000101000000100000101100000110000001111000000010001000000000001",
	63  => "00000000000000000000000000000000000000000000000000001110000000000000000000000000000000000000000000000000000000000001000000000001",
	64  => "00000001000000000111111100010001100010001111110011000000001111111111000000000011111111110000000011111111000000000000111100000000",
	65  => "00000011000000000011111000100010010001001111110011000000001111111111000000000011111111110000000011111111000000000000111100000000",
	66  => "00000111000000000001110001000100001000101111110011000000001111111111000000000011111111110000000000000000111111110000111100000000",
	67  => "00001111000000000000100010001000000100011111110011000000001111111111000000000011111111110011110000000000111111110000111100000000",
	68  => "00000111000010000000000000010001100010001111110011000000001111110000111100000011111111110011110000000000111111111111000000000000",
	69  => "00000011000111000000000000100010010001001111110011000000001111110000111100000011111111110000000000000000111111111111000000000000",
	70  => "00000001001111100000000001000100001000101111110011000000001111110000111100000011000000000000000000000000111111111111000011111111",
	71  => "00000000011111110000000010001000000100011111110011000000001111110000111100000011000000000000000000000000111111111111000011111111",
	72  => "11111111111100000000111100000000111111110000000000000100000000001100110000000000111100000000000000001111100000011111111110000000",
	73  => "11111111111100000000111100000000111111110000000000000100000001001100110000000000111100000000000000001111110000110111111011000000",
	74  => "11111111111100000000111100000000111111110000000000001110000001000011001100000000111100000000000000001111111001110011110011100000",
	75  => "11111111111100000000111100000000111111110000101000000100000010100011001100000000111100000000000000001111111111110001100011110000",
	76  => "00000000111100000000111111111111111111110001000100001110000010101100110000001111000000001111000000000000111111110001100011100000",
	77  => "00000000111100000000111111111111111111110001010100000100000100011100110000001111000000001111000000000000111001110011110011000000",
	78  => "00000000111100000000111111111111111111110000101000000100000111110011001100001111000000001111000000000000110000110111111010000000",
	79  => "00000000111100000000111111111111111111110000000000000000000000000011001100001111000000001111000000000000100000011111111100000000",
	80  => "00001110000111000001000000000000000011000000111000000100000111110000000000000000000000000001111100011111000111110000110000000000",
	81  => "00010001000000100000111000000000000000100001000100001010000001000000101000001010000000000001000100001010000100010001001000000000",
	82  => "00010001000000010001010100000000000000100001000100010001000011100000010100001010000111100000001000001010000000010001001000010110",
	83  => "00010001000111110001010100001010000001000001000100011111000101010000010000001010000010010000010000001010000000010000111000001001",
	84  => "00010001000000010001010100010101000010100000101000010001000101010000010000001010000010010000001000001010000000010001001000001001",
	85  => "00010001000000100000111000010101000010100000101000001010000011100000010000010110000010010001000100001010000000010001001000001001",
	86  => "00010001000111000000000100001010000010100001101100000100000001000000010000000001000001100001111100011001000000010000111000010110",
	87  => "00000000000000000000000000000000000001000000000000000000000111110000000000000001000000000000000000000000000000000000001100000000",
	88  => "00010001000000000000001000000101011111000000000000000000000000000000000000000000000001000000100000011000000000110000010000000000",
	89  => "00001110000111000000010100001010000001000000000000001100000110000000101000000100000001000001010000000110000011000000010000011111",
	90  => "00010001000111000000010000001010000001000000000000011110001001000000010100000000000001000000010000000001000100000001111100000000",
	91  => "00010001000111000000001000001010000001000000000000011110001001000000000000011111000001000000010000000110000011000000010000011111",
	92  => "00001110000111000000011100000000000001010000110000001100000110000000101000000000000001000000010000011000000000110000010000000000",
	93  => "00010001000111000000000000000000000001100000000000000000000000000000010100000100000001000000010000000000000000000000000000011111",
	94  => "00000000000111000000000000000000000001000000000000000000000000000000000000000000000001010000010000011111000111110001111100000000",
	95  => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010000000000000000000000000000000000",
	96  => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	97  => "00000000000000000000000000000000000000000000101000000000000000000000000000000100000000000000000000000000000000000000000000000000",
	98  => "00001110000100010001000100011100000010010000010000010001000100010001111000001110000011100000110000001001000011110000011000001001",
	99  => "00010001000100010001101100010100000001010000000000011001000010100001001000010101000100010000101000001001000000010000100000010101",
	100 => "00010001000111110001010100010100000000110001100100010101000001000000001000010101000111110000101000001001000011110000111000010111",
	101 => "00010001000100010001000100010010000001010001010100010011000010100000001000001110000000010000111000011111000100010000100100010101",
	102 => "00001110000100010001000100010001000010010001001100010001000100010000001000000100000011100001000100010000000011110001011000001001",
	103 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	104 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	105 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	106 => "00000011000100100001010100001110000101010000111100010001000000100000111100010101000100010001111100011110000011110001111000011110",
	107 => "00000010000100100001010100010001000101010001000000010001000000100001001000001110000010100000010000000001000100010001000100010010",
	108 => "00001110000111100001010100011100000101010000111000010011000011100000111000000100000001000000010000000001000011110001111000010010",
	109 => "00010010000100000001111100010001000101010001000000010101000100100001001000001110000000100000010000000001000000010001010000010010",
	110 => "00001110000100000001000000001110000111110000111100010011000011100000111100010101000000010000010000011110000000010001001000010010",
	111 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	112 => "00001110000100010001000100011000000100010000101000010001000100010001111100000100000111110001110000001001000111110000010000001001",
	113 => "00010001000100010001101100010100000010010000010000010001000100010001000100001110000000010001010000001001000100010000101000010101",
	114 => "00010001000100010001010100010010000001010001000100011001000010100001000100010101000000010001010000001001000000010001000100010101",
	115 => "00010001000111110001010100010010000000110001100100010101000001000000000100010101000011110001001000001001000011110001000100010111",
	116 => "00010001000100010001000100010010000001010001010100010011000010100000000100010101000000010001001000001001000100010001111100010101",
	117 => "00010001000100010001000100010010000010010001001100010001000100010000000100001110000000010001111100011111000100010001000100010101",
	118 => "00001110000100010001000100010001000100010001000100010001000100010000000100000100000111110001000100010000000011110001000100001001",
	119 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	120 => "00000000000100010001010100001110000101010000111100010001000000010000111100010101000100010001111100001110000011110001111000011111",
	121 => "00000000000100010001010100010001000101010001000000010001000000010001001000010101000100010000010000010001000100010001000100010001",
	122 => "00000000000100010001010100010000000101010001000000010001000000010001001000001110000100010000010000000001000100010001000100010001",
	123 => "00000000000100010001010100011110000101010000110000010011000011110000111000000100000010100000010000000001000011110001111000010001",
	124 => "00000000000111100001010100010000000101010001000000010101000100010001001000001110000001000000010000000001000000010001010000010001",
	125 => "00000000000100000001111100010001000101010001000000010101000100010001001000010101000000100000010000010001000000010001001000010001",
	126 => "00000000000100000001000000001110000111110000111100010011000011110000111100010101000000010000010000001110000000010001000100010001",
	127 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    attribute ROM_STYLE : string;
    attribute ROM_STYLE of rom_bits: signal is "BLOCK";
	
    -- This is the only true persistent variable, an array of RAM (which hopefully gets
    -- automatically inferred as BRAM because 9600 bytes is a lot!)
    signal charRAM : ram_bits_t;-- := (others => (others => '0') );
    attribute RAM_STYLE : string;
    attribute RAM_STYLE of charRAM: signal is "BLOCK";
    
    signal toWriteRAMAddr : integer := 0;
    signal toWriteCharPos : CHAR_POS;
    signal toWriteCharData : CHAR_DATA;
    signal toWriteCharASCII : STD_LOGIC_VECTOR(7 downto 0); -- 0 to 255
    signal toWriteCharForegroundColor : STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a with 1 bit each
    signal toWriteCharBackgroundColor : STD_LOGIC_VECTOR(3 downto 0); -- r, g, b, a with 1 bit each
    signal toReadCol : STD_LOGIC_VECTOR(2 downto 0);
    signal toReadCol2 : STD_LOGIC_VECTOR(2 downto 0);
    
    signal currentCharROMRow : STD_LOGIC_VECTOR(127 downto 0);
    signal currentCharData : CHAR_DATA;
    signal currentCharData2 : CHAR_DATA;

begin

    process(clk)
        
        -- All of these are temporaries:
        variable currentXChar : unsigned(6 downto 0) := "0000000";
        variable currentYChar : unsigned(5 downto 0) := "000000";
        -- variable currentCharData : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
        variable currentCharFGColor : STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
        variable currentCharBGColor : STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
        variable currentCharASCII : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
        variable currentCharROMRowID : STD_LOGIC_VECTOR(3 downto 0) := (others => '0');
        variable currentCompleteROMRow : STD_LOGIC_VECTOR(6 downto 0) := (others => '0');
        variable currentROMCol : STD_LOGIC_VECTOR(6 downto 0) := (others => '0');
        variable currentPixelIsFG : STD_LOGIC := '0';
        variable currentPixelRGBA : STD_LOGIC_VECTOR(3 downto 0);
        variable tempCharData : CHAR_DATA;
        variable tempWriteCharData : STD_LOGIC_VECTOR(15 downto 0);
    begin
        if (rising_edge(clk) ) then
            -- Early-out if we're not supposed to draw
            if (overlayDrawEnable = '0') then
                rgbColorOut <= "000";
                alphaBlendOut <= '0';
            else
                toReadCol <= drawXPixelCoord(2 downto 0);
                toReadCol2 <= toReadCol;
                currentXChar := unsigned(drawXPixelCoord(9 downto 3) );
                currentYChar := unsigned(drawYPixelCoord(8 downto 3) );
                tempCharData.charASCII := charRAM(to_integer(currentYChar & currentXChar) )(7 downto 0);
                tempCharData.bgColor := charRAM(to_integer(currentYChar & currentXChar) )(11 downto 8);
                tempCharData.fgColor := charRAM(to_integer(currentYChar & currentXChar) )(15 downto 12);
                -- currentCharData <= charRAM(to_integer(currentYChar & currentXChar) );
                currentCharData <= tempCharData;
                currentCharData2 <= currentCharData;
                currentCharROMRowID := currentCharData.charASCII(7 downto 4);
                currentCompleteROMRow := currentCharROMRowID & drawYPixelCoord(2 downto 0);
                currentCharROMRow <= rom_bits(to_integer(unsigned(currentCompleteROMRow) ) );
                currentROMCol := currentCharData2.charASCII(3 downto 0) & toReadCol2;
                currentPixelIsFG := currentCharROMRow(to_integer(unsigned(currentROMCol) ) );
                if (currentPixelIsFG = '1') then
                    if (currentCharData2.fgColor(0) = '1') then
                        currentPixelRGBA := currentCharData2.fgColor;
                    else
                        currentPixelRGBA := currentCharData2.bgColor;
                    end if;
                else
                    currentPixelRGBA := currentCharData2.bgColor;
                end if;
                
                rgbColorOut <= currentPixelRGBA(3 downto 1);
                alphaBlendOut <= currentPixelRGBA(0);
            end if;
            
            -- The write case is surprisingly simple given how complicated the read case was...
            if (writeEnable = '1') then
                toWriteRAMAddr <= to_integer(unsigned(writeYChar) & unsigned(writeXChar) );
                toWriteCharPos.xLoc <= writeXChar;
                toWriteCharPos.yLoc <= writeYChar;
                toWriteCharData.charASCII <= writeCharASCII;
                toWriteCharData.fgColor <= writeCharForegroundColor;
                toWriteCharData.bgColor <= writeCharBackgroundColor;
                tempWriteCharData := toWriteCharData.fgColor & toWriteCharData.bgColor & toWriteCharData.charASCII;
                charRAM(toWriteRAMAddr) <= tempWriteCharData;
            end if;
        end if;
    end process;

end Behavioral;
