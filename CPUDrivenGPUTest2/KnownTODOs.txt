Big TODO List:

New Features:
- 1Gbit Ethernet Support (plus packet system refactor/rewrite on both ends)
- Make texture sampler support textures larger than 128x128
- Make texture sampler support mipmapping
- Implement DXT Compressed Textures (DXT1, DXT3, DXT5)
- Implement optional texture formats (R3G3B2 and A8 are currently unsupported)
- Implement texture palettes (P8 textures)
- Implement log, exp, and sincos instructions
- Implement HDMI data island TERC4 packets (whichever are necessary to enable HDMI capture card capture)
- Finish implementing support for "passthrough" (D3DFVF_XYZRHW or POSITIONT vertex decl) vertex shaders in the driver
- Implement stencil buffering
- Implement hardware cursor
- Implement vertex fog/pixel fog
- Implement point-sprites
- Try upgrading to the latest Vivado to see if it improves build-times
- Implement VS-Vertex Decl pairs (so that rendering using the same fixed function state or same vertex shader but with a different vertex declaration produces a different shader)
- Implement driver-side shader cache management (storing multiple shaders at once to avoid too many shader reloads and I$ flushes)
- Have texture samplers support non-power of 2 texture dimensions (non-square textures should already be supported so long as both Width and Height are powers of 2)

Optimizations:
- Memory System Rewrite to support AXI4 Bursts (up to 128 bursts per read/write, and cannot cross a 4KB address boundary) for much higher bandwidth at the cost of memory latency. Also requires refactoring memory clients to use a new request scheme denoting "how much memory" to read/write at once
- Rewrite texture sampler texture cache to read from DRAM into the texture cache on-demand rather than loading in the whole texture at once
- Modify various systems to be able to support 1 triangle per clock cycle:
	- InputAssembler (lower priority)
	- Triangle Setup (higher priority)
- Modify various systems to be able to support at least 1 pixel per clock cycle:
	- DepthInterpolator (higher priority)
	- Attribute Interpolator (higher priority)
	- TexSampler (higher priority)
	- ROP (higher priority)
- Make the pixel pipeline parallel (4 or 8 or 16 pixels per clock cycle instead of just 1)
- Implement fast-clear optimization and have ROP and ClearBlock talk to one another about this
- Implement color buffer compression (ROP and ClearBlock need to know about this)
- Have the driver auto-detect that index buffers could be using a smaller index format and switch to that one (INDEX32 -> INDEX16 or INDEX16 -> INDEX8)
- Have the driver auto-detect when an indexed draw call is using an identity index buffer (0, 1, 2, 3, 4, 5, 6, ...) and replace that with a non-indexed draw call to save on time and bandwidth loading from the index buffer
- Have the driver detect when a vertex buffer uses repeated/constant/unused stream elements and rewrite the vertex buffer data to separate those repeated/constant elements to lower read memory bandwidth from vertex loads
- Tighten up the cycle scheduling in the ShaderCore, it's likely that 1 or 2 cycles per instruction are still available to be gained back
- Implement DX-level shader optimization step in shader compiler
- Implement device-level shader optimization step in shader compiler
- Don't actually upload vertex/index buffers or vertex shaders until the first time that they are referenced in a draw call
- If the driver detects that a texture uses fewer than 256 colors, then auto-convert its format to P8
- If the driver detects that a texture is not using all of its available channels, then auto-convert it to a format with fewer channels
- If the driver detects that a texture could be using a lower-bandwidth texture format or a smaller resolution, then convert it to that (DXT3/DXT5 with all opaque/fulltransparent texels -> DXT1, solid color texture > 4x4, all colors could be quantized to smaller format)
- When not using the viewport transform Z scale/offset, omit those instructions from the vertex shader viewport transform code
- When not using the viewport transform X/Y offset, omit those instructions from the vertex shader viewport transform code
- Optimize rcp instruction to have better than 14 cycle latency!
- Optimize vertex load and vertex export to use both ports simultaneously for double the speed of loading vertex data
- See if it's possible to optimize draw calls by switching from D3DPT_TRIANGLELIST to D3DPT_TRIANGLESTRIP in some cases (saves on index buffer bandwidth)

Bugfixes:
- Figure out why depth buffer URAM takes 2 read cycles to resolve
- Double check that Scanout isn't doing something dumb with requesting too much data
