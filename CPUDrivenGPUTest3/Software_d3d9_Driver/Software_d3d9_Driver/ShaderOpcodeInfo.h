#pragma once

#include "d3d9include.h"
#include "ShaderBase.h"

enum opcodeDisplayType
{
	justOpcode = 0,
	srcOnly,
	srcSrcOnly,
	dstOnly,
	srcDst,
	srcSrcDst,
	srcSrcSrcDst,
	srcSrcSrcSrcDst, // Only ever used with D3DSIO_TEXLDD
	customOpcode
};

static const char* const opcodeToString[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	"NOP", //D3DSIO_NOP          = 0,
    "MOV", //D3DSIO_MOV          ,
    "ADD", //D3DSIO_ADD          ,
    "SUB", //D3DSIO_SUB          ,
    "MAD", //D3DSIO_MAD          ,
    "MUL", //D3DSIO_MUL          ,
    "RCP", //D3DSIO_RCP          ,
    "RSQ", //D3DSIO_RSQ          ,
	"DP3", //D3DSIO_DP3          ,
    "DP4", //D3DSIO_DP4          ,
    "MIN", //D3DSIO_MIN          ,
    "MAX", //D3DSIO_MAX          ,
    "SLT", //D3DSIO_SLT          ,
    "SGE", //D3DSIO_SGE          ,
    "EXP", //D3DSIO_EXP          ,
    "LOG", //D3DSIO_LOG          ,
    "LIT", //D3DSIO_LIT          ,
    "DST", //D3DSIO_DST          ,
	"LRP", //D3DSIO_LRP          ,
    "FRC", //D3DSIO_FRC          ,
    "M4x4", //D3DSIO_M4x4         ,
    "M4x3", //D3DSIO_M4x3         ,
    "M3x4", //D3DSIO_M3x4         ,
    "M3x3", //D3DSIO_M3x3         ,
    "M3x2", //D3DSIO_M3x2         ,
    "CALL", //D3DSIO_CALL         ,
    "CALLNZ", //D3DSIO_CALLNZ       ,
    "LOOP", //D3DSIO_LOOP         ,
    "RET", //D3DSIO_RET          ,
    "ENDLOOP", //D3DSIO_ENDLOOP      ,
    "LABEL", //D3DSIO_LABEL        ,
    "DCL", //D3DSIO_DCL          ,
    "POW", //D3DSIO_POW          ,
    "CRS", //D3DSIO_CRS          ,
    "SGN", //D3DSIO_SGN          ,
    "ABS", //D3DSIO_ABS          ,
	"NRM", //D3DSIO_NRM          ,
    "SINCOS", //D3DSIO_SINCOS       ,
    "REP", //D3DSIO_REP          ,
    "ENDREP", //D3DSIO_ENDREP       ,
    "IF", //D3DSIO_IF           ,
    "IF_COMP", //D3DSIO_IFC          ,
    "ELSE", //D3DSIO_ELSE         ,
    "ENDIF", //D3DSIO_ENDIF        ,
    "BREAK", //D3DSIO_BREAK        ,
    "BREAK_COMP", //D3DSIO_BREAKC       ,
    "MOVA", //D3DSIO_MOVA         ,
    "DEFB", //D3DSIO_DEFB         ,
    "DEFI", //D3DSIO_DEFI         ,

	"UNK49",
	"UNK50",
	"UNK51",
	"UNK52",
	"UNK53",
	"UNK54",
	"UNK55",
	"UNK56",
	"UNK57",
	"UNK58",
	"UNK59",
	"UNK60",
	"UNK61",
	"UNK62",
	"UNK63",

    "TEXCOORD", //D3DSIO_TEXCOORD     = 64,
    "TEXKILL", //D3DSIO_TEXKILL      ,
    "TEX", //D3DSIO_TEX          ,
    "TEXBEM", //D3DSIO_TEXBEM       ,
    "TEXBEML", //D3DSIO_TEXBEML      ,
    "TEXREG2AR", //D3DSIO_TEXREG2AR    ,
    "TEXREG2GB", //D3DSIO_TEXREG2GB    ,
    "TEXM3x2PAD", //D3DSIO_TEXM3x2PAD   ,
    "TEXM3x2TEX", //D3DSIO_TEXM3x2TEX   ,
    "TEXM3x3PAD", //D3DSIO_TEXM3x3PAD   ,
    "TEXM3x3TEX", //D3DSIO_TEXM3x3TEX   ,
    "RESERVED0", //D3DSIO_RESERVED0    ,
    "TEXM3x3SPEC", //D3DSIO_TEXM3x3SPEC  ,
    "TEXM3x3VSPEC", //D3DSIO_TEXM3x3VSPEC ,
    "EXPP", //D3DSIO_EXPP         ,
    "LOGP", //D3DSIO_LOGP         ,
    "CND", //D3DSIO_CND          ,
    "DEF", //D3DSIO_DEF          ,
    "TEXREG2RGB", //D3DSIO_TEXREG2RGB   ,
    "TEXDP3TEX", //D3DSIO_TEXDP3TEX    ,
    "TEXM3x2DEPTH", //D3DSIO_TEXM3x2DEPTH ,
	"TEXDP3", //D3DSIO_TEXDP3       ,
    "TEXM3x3", //D3DSIO_TEXM3x3      ,
    "TEXDEPTH", //D3DSIO_TEXDEPTH     ,
    "CMP", //D3DSIO_CMP          ,
    "BEM", //D3DSIO_BEM          ,
    "DP2ADD", //D3DSIO_DP2ADD       ,
    "DSX", //D3DSIO_DSX          ,
    "DSY", //D3DSIO_DSY          ,
    "TEXLDD", //D3DSIO_TEXLDD       ,
    "SETP", //D3DSIO_SETP         ,
    "TEXLDL", //D3DSIO_TEXLDL       ,
    "BREAK_PRED", //D3DSIO_BREAKP       ,
};

static const char* const endOpcodes[] =
{
	"PHASE",
	"COMMENT",
	"END"
};

// Returns the opcode as a string suitable for diassembly
inline const char* const GetOpcodeString(const D3DSHADER_INSTRUCTION_OPCODE_TYPE opcode)
{
	if (opcode <= D3DSIO_BREAKP)
		return opcodeToString[opcode];
	else if (opcode >= D3DSIO_PHASE && opcode <= D3DSIO_END)
		return endOpcodes[opcode - D3DSIO_PHASE];
	else
		return "UNKNOWN_OPCODE";
}

static const char* const opcodeToFunction[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	"nop", //D3DSIO_NOP          = 0,
    "mov", //D3DSIO_MOV          ,
    "add", //D3DSIO_ADD          ,
    "sub", //D3DSIO_SUB          ,
    "mad", //D3DSIO_MAD          ,
    "mul", //D3DSIO_MUL          ,
    "rcp", //D3DSIO_RCP          ,
    "rsq", //D3DSIO_RSQ          ,
	"dp3", //D3DSIO_DP3          ,
    "dp4", //D3DSIO_DP4          ,
    "min", //D3DSIO_MIN          ,
    "max", //D3DSIO_MAX          ,
    "slt", //D3DSIO_SLT          ,
    "sge", //D3DSIO_SGE          ,
    "exp", //D3DSIO_EXP          ,
    "log", //D3DSIO_LOG          ,
    "lit", //D3DSIO_LIT          ,
    "dst", //D3DSIO_DST          ,
	"lrp", //D3DSIO_LRP          ,
    "frc", //D3DSIO_FRC          ,
    "m4x4", //D3DSIO_M4x4         ,
    "m4x3", //D3DSIO_M4x3         ,
    "m3x4", //D3DSIO_M3x4         ,
    "m3x3", //D3DSIO_M3x3         ,
    "m3x2", //D3DSIO_M3x2         ,
    "call", //D3DSIO_CALL         ,
    "callnz", //D3DSIO_CALLNZ       ,
    "loop", //D3DSIO_LOOP         ,
    "ret", //D3DSIO_RET          ,
    "endloop", //D3DSIO_ENDLOOP      ,
    "label", //D3DSIO_LABEL        ,
    "dcl", //D3DSIO_DCL          ,
    "pow", //D3DSIO_POW          ,
    "crs", //D3DSIO_CRS          ,
    "sgn", //D3DSIO_SGN          ,
    "abs", //D3DSIO_ABS          ,
	"nrm", //D3DSIO_NRM          ,
    "sincos", //D3DSIO_SINCOS       ,
    "rep", //D3DSIO_REP          ,
    "endrep", //D3DSIO_ENDREP       ,
    "iffunc", //D3DSIO_IF           ,
    "if_comp", //D3DSIO_IFC          ,
    "elsefunc", //D3DSIO_ELSE         ,
    "endif", //D3DSIO_ENDIF        ,
    "breakfunc", //D3DSIO_BREAK        ,
    "break_comp", //D3DSIO_BREAKC       ,
    "mova", //D3DSIO_MOVA         ,
    "defb", //D3DSIO_DEFB         ,
    "defi", //D3DSIO_DEFI         ,

	"unk49",
	"unk50",
	"unk51",
	"unk52",
	"unk53",
	"unk54",
	"unk55",
	"unk56",
	"unk57",
	"unk58",
	"unk59",
	"unk60",
	"unk61",
	"unk62",
	"unk63",

    "texcoord", //D3DSIO_TEXCOORD     = 64,
    "texkill", //D3DSIO_TEXKILL      ,
    "tex", //D3DSIO_TEX          ,
    "texbem", //D3DSIO_TEXBEM       ,
    "texbeml", //D3DSIO_TEXBEML      ,
    "texreg2ar", //D3DSIO_TEXREG2AR    ,
    "texreg2gb", //D3DSIO_TEXREG2GB    ,
    "texm3x2pad", //D3DSIO_TEXM3x2PAD   ,
    "texm3x2tex", //D3DSIO_TEXM3x2TEX   ,
    "texm3x3pad", //D3DSIO_TEXM3x3PAD   ,
    "texm3x3tex", //D3DSIO_TEXM3x3TEX   ,
    "reserved0", //D3DSIO_RESERVED0    ,
    "texm3x3spec", //D3DSIO_TEXM3x3SPEC  ,
    "texm3x3vspec", //D3DSIO_TEXM3x3VSPEC ,
    "exp", //D3DSIO_EXPP         ,
    "log", //D3DSIO_LOGP         ,
    "cnd", //D3DSIO_CND          ,
    "def", //D3DSIO_DEF          ,
    "texreg2rgb", //D3DSIO_TEXREG2RGB   ,
    "texdp3tex", //D3DSIO_TEXDP3TEX    ,
    "texm3x2depth", //D3DSIO_TEXM3x2DEPTH ,
	"texdp3", //D3DSIO_TEXDP3       ,
    "texm3x3", //D3DSIO_TEXM3x3      ,
    "texdepth", //D3DSIO_TEXDEPTH     ,
    "cmp", //D3DSIO_CMP          ,
    "bem", //D3DSIO_BEM          ,
    "dp2add", //D3DSIO_DP2ADD       ,
    "dsx", //D3DSIO_DSX          ,
    "dsy", //D3DSIO_DSY          ,
    "texldd", //D3DSIO_TEXLDD       ,
    "setp", //D3DSIO_SETP         ,
    "texldl", //D3DSIO_TEXLDL       ,
    "break_pred", //D3DSIO_BREAKP       ,
};

// Returns the name of the function that this opcode maps to
inline const char* const GetOpcodeFunctionString(const D3DSHADER_INSTRUCTION_OPCODE_TYPE opcode)
{
	if (opcode <= D3DSIO_BREAKP)
		return opcodeToFunction[opcode];
	else
		return "function_not_found";
}

static const opcodeDisplayType opcodeTypes[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	justOpcode, //D3DSIO_NOP          = 0,
    srcDst, //D3DSIO_MOV          ,
	srcSrcDst, //D3DSIO_ADD          ,
    srcSrcDst, //D3DSIO_SUB          ,
    srcSrcSrcDst, //D3DSIO_MAD          ,
    srcSrcDst, //D3DSIO_MUL          ,
    srcDst, //D3DSIO_RCP          ,
    srcDst, //D3DSIO_RSQ          ,
	srcSrcDst, //D3DSIO_DP3          ,
    srcSrcDst, //D3DSIO_DP4          ,
    srcSrcDst, //D3DSIO_MIN          ,
    srcSrcDst, //D3DSIO_MAX          ,
    srcSrcDst, //D3DSIO_SLT          ,
    srcSrcDst, //D3DSIO_SGE          ,
    srcDst, //D3DSIO_EXP          ,
    srcDst, //D3DSIO_LOG          ,
    srcDst, //D3DSIO_LIT          ,
    srcSrcDst, //D3DSIO_DST          ,
	srcSrcSrcDst, //D3DSIO_LRP          ,
    srcDst, //D3DSIO_FRC          ,
    srcSrcDst, //D3DSIO_M4x4         ,
    srcSrcDst, //D3DSIO_M4x3         ,
    srcSrcDst, //D3DSIO_M3x4         ,
    srcSrcDst, //D3DSIO_M3x3         ,
    srcSrcDst, //D3DSIO_M3x2         ,
    srcOnly, //D3DSIO_CALL         ,
    srcSrcOnly, //D3DSIO_CALLNZ       ,
    srcSrcOnly, //D3DSIO_LOOP         ,
    justOpcode, //D3DSIO_RET          ,
    justOpcode, //D3DSIO_ENDLOOP      ,
    customOpcode, //D3DSIO_LABEL        ,
    customOpcode, //D3DSIO_DCL          ,
    srcSrcDst, //D3DSIO_POW          ,
    srcSrcDst, //D3DSIO_CRS          ,
    srcSrcSrcDst, //D3DSIO_SGN          ,
    srcDst, //D3DSIO_ABS          ,
	srcDst, //D3DSIO_NRM          ,
    customOpcode, //D3DSIO_SINCOS       ,
    srcOnly, //D3DSIO_REP          ,
    justOpcode, //D3DSIO_ENDREP       ,
    srcOnly, //D3DSIO_IF           ,
    srcSrcOnly, //D3DSIO_IFC          ,
    justOpcode, //D3DSIO_ELSE         ,
    justOpcode, //D3DSIO_ENDIF        ,
    justOpcode, //D3DSIO_BREAK        ,
    srcSrcOnly, //D3DSIO_BREAKC       ,
    srcDst, //D3DSIO_MOVA         ,
    customOpcode, //D3DSIO_DEFB         ,
    customOpcode, //D3DSIO_DEFI         ,

	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,
	justOpcode,

    dstOnly, //D3DSIO_TEXCOORD     = 64,
    dstOnly, //D3DSIO_TEXKILL      ,
    customOpcode, //D3DSIO_TEX          ,
    srcDst, //D3DSIO_TEXBEM       ,
    srcDst, //D3DSIO_TEXBEML      ,
    srcDst, //D3DSIO_TEXREG2AR    ,
    srcDst, //D3DSIO_TEXREG2GB    ,
    srcDst, //D3DSIO_TEXM3x2PAD   ,
    srcDst, //D3DSIO_TEXM3x2TEX   ,
    srcDst, //D3DSIO_TEXM3x3PAD   ,
    srcDst, //D3DSIO_TEXM3x3TEX   ,
    justOpcode, //D3DSIO_RESERVED0    ,
    srcSrcDst, //D3DSIO_TEXM3x3SPEC  ,
    srcDst, //D3DSIO_TEXM3x3VSPEC ,
    srcDst, //D3DSIO_EXPP         ,
    srcDst, //D3DSIO_LOGP         ,
    srcSrcSrcDst, //D3DSIO_CND          ,
    customOpcode, //D3DSIO_DEF          ,
    srcDst, //D3DSIO_TEXREG2RGB   ,
    srcDst, //D3DSIO_TEXDP3TEX    ,
    srcDst, //D3DSIO_TEXM3x2DEPTH ,
	srcDst, //D3DSIO_TEXDP3       ,
    srcDst, //D3DSIO_TEXM3x3      ,
    dstOnly, //D3DSIO_TEXDEPTH     ,
    srcSrcSrcDst, //D3DSIO_CMP          ,
    srcSrcDst, //D3DSIO_BEM          ,
    srcSrcSrcDst, //D3DSIO_DP2ADD       ,
    srcDst, //D3DSIO_DSX          ,
    srcDst, //D3DSIO_DSY          ,
    srcSrcSrcSrcDst, //D3DSIO_TEXLDD       ,
    srcSrcDst, //D3DSIO_SETP         ,
    srcSrcDst, //D3DSIO_TEXLDL       ,
    srcOnly, //D3DSIO_BREAKP       ,
};

static const bool isOpcodeTexInstruction[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	false, //D3DSIO_NOP          = 0,
    false, //D3DSIO_MOV          ,
	false, //D3DSIO_ADD          ,
    false, //D3DSIO_SUB          ,
    false, //D3DSIO_MAD          ,
    false, //D3DSIO_MUL          ,
    false, //D3DSIO_RCP          ,
    false, //D3DSIO_RSQ          ,
	false, //D3DSIO_DP3          ,
    false, //D3DSIO_DP4          ,
    false, //D3DSIO_MIN          ,
    false, //D3DSIO_MAX          ,
    false, //D3DSIO_SLT          ,
    false, //D3DSIO_SGE          ,
    false, //D3DSIO_EXP          ,
    false, //D3DSIO_LOG          ,
    false, //D3DSIO_LIT          ,
    false, //D3DSIO_DST          ,
	false, //D3DSIO_LRP          ,
    false, //D3DSIO_FRC          ,
    false, //D3DSIO_M4x4         ,
    false, //D3DSIO_M4x3         ,
    false, //D3DSIO_M3x4         ,
    false, //D3DSIO_M3x3         ,
    false, //D3DSIO_M3x2         ,
    false, //D3DSIO_CALL         ,
    false, //D3DSIO_CALLNZ       ,
    false, //D3DSIO_LOOP         ,
    false, //D3DSIO_RET          ,
    false, //D3DSIO_ENDLOOP      ,
    false, //D3DSIO_LABEL        ,
    false, //D3DSIO_DCL          ,
    false, //D3DSIO_POW          ,
    false, //D3DSIO_CRS          ,
    false, //D3DSIO_SGN          ,
    false, //D3DSIO_ABS          ,
	false, //D3DSIO_NRM          ,
    false, //D3DSIO_SINCOS       ,
    false, //D3DSIO_REP          ,
    false, //D3DSIO_ENDREP       ,
    false, //D3DSIO_IF           ,
    false, //D3DSIO_IFC          ,
    false, //D3DSIO_ELSE         ,
    false, //D3DSIO_ENDIF        ,
    false, //D3DSIO_BREAK        ,
    false, //D3DSIO_BREAKC       ,
    false, //D3DSIO_MOVA         ,
    false, //D3DSIO_DEFB         ,
    false, //D3DSIO_DEFI         ,

	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,

    false, //D3DSIO_TEXCOORD     = 64,
    false, //D3DSIO_TEXKILL      ,
    true, //D3DSIO_TEX          ,
    true, //D3DSIO_TEXBEM       ,
    true, //D3DSIO_TEXBEML      ,
    true, //D3DSIO_TEXREG2AR    ,
    true, //D3DSIO_TEXREG2GB    ,
    false, //D3DSIO_TEXM3x2PAD   ,
    true, //D3DSIO_TEXM3x2TEX   ,
    false, //D3DSIO_TEXM3x3PAD   ,
    true, //D3DSIO_TEXM3x3TEX   ,
    false, //D3DSIO_RESERVED0    ,
    true, //D3DSIO_TEXM3x3SPEC  ,
    true, //D3DSIO_TEXM3x3VSPEC ,
    false, //D3DSIO_EXPP         ,
    false, //D3DSIO_LOGP         ,
    false, //D3DSIO_CND          ,
    false, //D3DSIO_DEF          ,
    true, //D3DSIO_TEXREG2RGB   ,
    true, //D3DSIO_TEXDP3TEX    ,
    false, //D3DSIO_TEXM3x2DEPTH ,
	false, //D3DSIO_TEXDP3       ,
    false, //D3DSIO_TEXM3x3      ,
    false, //D3DSIO_TEXDEPTH     ,
    false, //D3DSIO_CMP          ,
    false, //D3DSIO_BEM          ,
    false, //D3DSIO_DP2ADD       ,
    false, //D3DSIO_DSX          ,
    false, //D3DSIO_DSY          ,
    true, //D3DSIO_TEXLDD       ,
    false, //D3DSIO_SETP         ,
    true, //D3DSIO_TEXLDL       ,
    false, //D3DSIO_BREAKP       ,
};

static const bool isDynamicBranchingInstruction[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	false, //D3DSIO_NOP          = 0,
    false, //D3DSIO_MOV          ,
	false, //D3DSIO_ADD          ,
    false, //D3DSIO_SUB          ,
    false, //D3DSIO_MAD          ,
    false, //D3DSIO_MUL          ,
    false, //D3DSIO_RCP          ,
    false, //D3DSIO_RSQ          ,
	false, //D3DSIO_DP3          ,
    false, //D3DSIO_DP4          ,
    false, //D3DSIO_MIN          ,
    false, //D3DSIO_MAX          ,
    false, //D3DSIO_SLT          ,
    false, //D3DSIO_SGE          ,
    false, //D3DSIO_EXP          ,
    false, //D3DSIO_LOG          ,
    false, //D3DSIO_LIT          ,
    false, //D3DSIO_DST          ,
	false, //D3DSIO_LRP          ,
    false, //D3DSIO_FRC          ,
    false, //D3DSIO_M4x4         ,
    false, //D3DSIO_M4x3         ,
    false, //D3DSIO_M3x4         ,
    false, //D3DSIO_M3x3         ,
    false, //D3DSIO_M3x2         ,
    false, //D3DSIO_CALL         ,
    true, //D3DSIO_CALLNZ       ,
    false, //D3DSIO_LOOP         ,
    false, //D3DSIO_RET          ,
    false, //D3DSIO_ENDLOOP      ,
    false, //D3DSIO_LABEL        ,
    false, //D3DSIO_DCL          ,
    false, //D3DSIO_POW          ,
    false, //D3DSIO_CRS          ,
    false, //D3DSIO_SGN          ,
    false, //D3DSIO_ABS          ,
	false, //D3DSIO_NRM          ,
    false, //D3DSIO_SINCOS       ,
    false, //D3DSIO_REP          ,
    false, //D3DSIO_ENDREP       ,
    false, //D3DSIO_IF           ,
    true, //D3DSIO_IFC          ,
    false, //D3DSIO_ELSE         ,
    false, //D3DSIO_ENDIF        ,
    false, //D3DSIO_BREAK        ,
    true, //D3DSIO_BREAKC       ,
    false, //D3DSIO_MOVA         ,
    false, //D3DSIO_DEFB         ,
    false, //D3DSIO_DEFI         ,

	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,
	false,

    false, //D3DSIO_TEXCOORD     = 64,
    false, //D3DSIO_TEXKILL      ,
    false, //D3DSIO_TEX          ,
    false, //D3DSIO_TEXBEM       ,
    false, //D3DSIO_TEXBEML      ,
    false, //D3DSIO_TEXREG2AR    ,
    false, //D3DSIO_TEXREG2GB    ,
    false, //D3DSIO_TEXM3x2PAD   ,
    false, //D3DSIO_TEXM3x2TEX   ,
    false, //D3DSIO_TEXM3x3PAD   ,
    false, //D3DSIO_TEXM3x3TEX   ,
    false, //D3DSIO_RESERVED0    ,
    false, //D3DSIO_TEXM3x3SPEC  ,
    false, //D3DSIO_TEXM3x3VSPEC ,
    false, //D3DSIO_EXPP         ,
    false, //D3DSIO_LOGP         ,
    false, //D3DSIO_CND          ,
    false, //D3DSIO_DEF          ,
    false, //D3DSIO_TEXREG2RGB   ,
    false, //D3DSIO_TEXDP3TEX    ,
    false, //D3DSIO_TEXM3x2DEPTH ,
	false, //D3DSIO_TEXDP3       ,
    false, //D3DSIO_TEXM3x3      ,
    false, //D3DSIO_TEXDEPTH     ,
    false, //D3DSIO_CMP          ,
    false, //D3DSIO_BEM          ,
    false, //D3DSIO_DP2ADD       ,
    false, //D3DSIO_DSX          ,
    false, //D3DSIO_DSY          ,
    false, //D3DSIO_TEXLDD       ,
    false, //D3DSIO_SETP         ,
    false, //D3DSIO_TEXLDL       ,
    true, //D3DSIO_BREAKP       ,
};

static const int instructionTabIndents[D3DSHADER_INSTRUCTION_OPCODE_TYPE::D3DSIO_BREAKP + 1] =
{
	0, //D3DSIO_NOP          = 0,
    0, //D3DSIO_MOV          ,
	0, //D3DSIO_ADD          ,
    0, //D3DSIO_SUB          ,
    0, //D3DSIO_MAD          ,
    0, //D3DSIO_MUL          ,
    0, //D3DSIO_RCP          ,
    0, //D3DSIO_RSQ          ,
	0, //D3DSIO_DP3          ,
    0, //D3DSIO_DP4          ,
    0, //D3DSIO_MIN          ,
    0, //D3DSIO_MAX          ,
    0, //D3DSIO_SLT          ,
    0, //D3DSIO_SGE          ,
    0, //D3DSIO_EXP          ,
    0, //D3DSIO_LOG          ,
    0, //D3DSIO_LIT          ,
    0, //D3DSIO_DST          ,
	0, //D3DSIO_LRP          ,
    0, //D3DSIO_FRC          ,
    0, //D3DSIO_M4x4         ,
    0, //D3DSIO_M4x3         ,
    0, //D3DSIO_M3x4         ,
    0, //D3DSIO_M3x3         ,
    0, //D3DSIO_M3x2         ,
    0, //D3DSIO_CALL         ,
    0, //D3DSIO_CALLNZ       ,
    1, //D3DSIO_LOOP         ,
    0, //D3DSIO_RET          ,
    -1, //D3DSIO_ENDLOOP      ,
    0, //D3DSIO_LABEL        ,
    0, //D3DSIO_DCL          ,
    0, //D3DSIO_POW          ,
    0, //D3DSIO_CRS          ,
    0, //D3DSIO_SGN          ,
    0, //D3DSIO_ABS          ,
	0, //D3DSIO_NRM          ,
    0, //D3DSIO_SINCOS       ,
    1, //D3DSIO_REP          ,
    -1, //D3DSIO_ENDREP       ,
    1, //D3DSIO_IF           ,
    1, //D3DSIO_IFC          ,
    0, //D3DSIO_ELSE         ,
    -1, //D3DSIO_ENDIF        ,
    0, //D3DSIO_BREAK        ,
    0, //D3DSIO_BREAKC       ,
    0, //D3DSIO_MOVA         ,
    0, //D3DSIO_DEFB         ,
    0, //D3DSIO_DEFI         ,

	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,

    0, //D3DSIO_TEXCOORD     = 64,
    0, //D3DSIO_TEXKILL      ,
    0, //D3DSIO_TEX          ,
    0, //D3DSIO_TEXBEM       ,
    0, //D3DSIO_TEXBEML      ,
    0, //D3DSIO_TEXREG2AR    ,
    0, //D3DSIO_TEXREG2GB    ,
    0, //D3DSIO_TEXM3x2PAD   ,
    0, //D3DSIO_TEXM3x2TEX   ,
    0, //D3DSIO_TEXM3x3PAD   ,
    0, //D3DSIO_TEXM3x3TEX   ,
    0, //D3DSIO_RESERVED0    ,
    0, //D3DSIO_TEXM3x3SPEC  ,
    0, //D3DSIO_TEXM3x3VSPEC ,
    0, //D3DSIO_EXPP         ,
    0, //D3DSIO_LOGP         ,
    0, //D3DSIO_CND          ,
    0, //D3DSIO_DEF          ,
    0, //D3DSIO_TEXREG2RGB   ,
    0, //D3DSIO_TEXDP3TEX    ,
    0, //D3DSIO_TEXM3x2DEPTH ,
	0, //D3DSIO_TEXDP3       ,
    0, //D3DSIO_TEXM3x3      ,
    0, //D3DSIO_TEXDEPTH     ,
    0, //D3DSIO_CMP          ,
    0, //D3DSIO_BEM          ,
    0, //D3DSIO_DP2ADD       ,
    0, //D3DSIO_DSX          ,
    0, //D3DSIO_DSY          ,
    0, //D3DSIO_TEXLDD       ,
    0, //D3DSIO_SETP         ,
    0, //D3DSIO_TEXLDL       ,
    0, //D3DSIO_BREAKP       ,
};

inline const opcodeDisplayType GetOpcodeDisplayType(const D3DSHADER_INSTRUCTION_OPCODE_TYPE opcode)
{
	if (opcode <= D3DSIO_DEFI)
		return opcodeTypes[opcode];
	else if (opcode >= D3DSIO_TEXCOORD && opcode <= D3DSIO_BREAKP)
		return opcodeTypes[opcode];
	else
		return customOpcode;
}
